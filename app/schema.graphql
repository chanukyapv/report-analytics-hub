
scalar Date
scalar Upload

type Query {
  hello: String!
  me: User!
  roles: [String!]!
  
  # Admin dashboard
  users: [User!]!
  roleRequests(status: String): [RoleRequest!]!
  userRoleRequests: [RoleRequest!]!
  systemStats: SystemStats!
  userActivities: [UserActivity!]!
  
  # Service dashboard
  metrics(filter: MetricFilterInput): [Metric!]!
  metric(id: ID!): Metric
  weeklyReports(filter: WeeklyReportFilterInput): [WeeklyReport!]!
  weeklyReport(id: ID!): WeeklyReport
  quarterlyReports(fiscalYear: String!, quarter: Int!): [WeeklyReport!]!
  serviceMetricDashboard: ServiceMetricDashboard!
  fyConfigs: [FYConfig!]!
  fyConfig(id: ID!): FYConfig
  getDraft(type: String!, reference: String): ReportDraft
  
  # IndusIT dashboard
  automations(filter: AutomationFilterInput): [Automation!]!
  automation(id: ID!): Automation
  executionDatas(filter: ExecutionDataFilterInput): [ExecutionData!]!
  executionData(id: ID!): ExecutionData
  infraServers(filter: InfraServerFilterInput): [InfraServer!]!
  infraServer(id: ID!): InfraServer
  interfaces(filter: InterfaceFilterInput): [Interface!]!
  interface(id: ID!): Interface
  microbots(filter: MicrobotFilterInput): [Microbot!]!
  microbot(id: ID!): Microbot
  indusITDashboardSummary: IndusITDashboardSummary!
  adminDashboardSummary: AdminDashboardSummary!
}

type Mutation {
  # Auth
  login(email: String!, password: String!): AuthPayload!
  register(input: RegisterInput!): AuthPayload!
  
  # Role management
  requestRole(input: RoleRequestInput!): RoleRequest!
  approveRoleRequest(input: ApproveRoleRequestInput!): RoleRequest!
  updateUserRole(input: UpdateUserRoleInput!): User!
  
  # Metrics
  createMetric(input: MetricInput!): Metric!
  updateMetric(id: ID!, input: MetricInput!): Metric!
  deleteMetric(id: ID!): Boolean!
  
  # Weekly reports
  createWeeklyReport(input: WeeklyReportInput!): WeeklyReport!
  updateWeeklyReport(id: ID!, input: WeeklyReportInput!): WeeklyReport!
  deleteWeeklyReport(id: ID!): Boolean!
  exportReport(input: ExportReportInput!): String!
  
  # FY Config
  createFYConfig(input: FYConfigInput!): FYConfig!
  updateFYConfig(id: ID!, input: FYConfigInput!): FYConfig!
  deleteFYConfig(id: ID!): Boolean!
  
  # Report drafts
  saveDraft(input: SaveDraftInput!): ReportDraft!
  
  # IndusIT dashboard
  createAutomation(input: AutomationInput!): Automation!
  updateAutomation(id: ID!, input: AutomationInput!): Automation!
  deleteAutomation(id: ID!): Boolean!
  
  createExecutionData(input: ExecutionDataInput!): ExecutionData!
  updateExecutionData(id: ID!, input: ExecutionDataInput!): ExecutionData!
  deleteExecutionData(id: ID!): Boolean!
  
  createInfraServer(input: InfraServerInput!): InfraServer!
  updateInfraServer(id: ID!, input: InfraServerInput!): InfraServer!
  deleteInfraServer(id: ID!): Boolean!
  
  createInterface(input: InterfaceInput!): Interface!
  updateInterface(id: ID!, input: InterfaceInput!): Interface!
  deleteInterface(id: ID!): Boolean!
  
  createMicrobot(input: MicrobotInput!): Microbot!
  updateMicrobot(id: ID!, input: MicrobotInput!): Microbot!
  deleteMicrobot(id: ID!): Boolean!
}

# Auth types
type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  lastLogin: Date
  loginCount: Int
}

type AuthPayload {
  token: String!
  user: User!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
}

# Role management types
type RoleRequest {
  id: ID!
  userId: ID!
  userName: String!
  userEmail: String!
  requestedRole: String!
  status: String!
  requestDate: Date!
  approvalDate: Date
  approvedBy: ID
  approvedByName: String
  notes: String
}

input RoleRequestInput {
  role: String!
  notes: String
}

input ApproveRoleRequestInput {
  requestId: ID!
  status: String!
  notes: String
}

input UpdateUserRoleInput {
  userId: ID!
  role: String!
}

# System stats types
type SystemStats {
  totalUsers: Int!
  activeUsers: Int!
  usersByRole: [RoleCount!]!
  pendingRequests: Int!
}

type RoleCount {
  role: String!
  count: Int!
}

type UserActivity {
  id: ID!
  name: String!
  email: String!
  lastLogin: Date
  loginCount: Int!
}

# Metrics types
type Metric {
  id: ID!
  name: String!
  description: String
  metricType: String!
  unit: String
  baseline: Float
  target: Float
  direction: String!
  frequency: String!
  owner: String!
  createdBy: String!
  createdAt: Date!
  updatedAt: Date
}

input MetricInput {
  name: String!
  description: String
  metricType: String!
  unit: String
  baseline: Float
  target: Float
  direction: String!
  frequency: String!
  owner: String!
}

input MetricFilterInput {
  metricType: String
  frequency: String
  owner: String
  createdBy: String
  search: String
}

# Weekly report types
type WeeklyReport {
  id: ID!
  metricId: ID!
  metricName: String!
  weekDate: Date!
  weekNumber: Int!
  value: Float!
  status: String!
  commentary: String
  actions: String
  fiscalYear: String!
  quarter: Int!
  createdBy: String!
  createdAt: Date!
  updatedAt: Date
}

input WeeklyReportInput {
  metricId: ID!
  weekDate: Date!
  weekNumber: Int!
  value: Float!
  status: String!
  commentary: String
  actions: String
  fiscalYear: String!
  quarter: Int!
}

input WeeklyReportFilterInput {
  metricId: ID
  fiscalYear: String
  quarter: Int
  weekNumber: Int
  status: String
}

input ExportReportInput {
  fiscalYear: String!
  quarter: Int!
  format: String!
  metricIds: [ID!]
}

# FY Config types
type FYConfig {
  id: ID!
  fiscalYear: String!
  startDate: Date!
  endDate: Date!
  q1Start: Date!
  q1End: Date!
  q2Start: Date!
  q2End: Date!
  q3Start: Date!
  q3End: Date!
  q4Start: Date!
  q4End: Date!
  createdBy: String!
  createdAt: Date!
  updatedAt: Date
}

input FYConfigInput {
  fiscalYear: String!
  startDate: Date!
  endDate: Date!
  q1Start: Date!
  q1End: Date!
  q2Start: Date!
  q2End: Date!
  q3Start: Date!
  q3End: Date!
  q4Start: Date!
  q4End: Date!
}

# Service Dashboard summary
type ServiceMetricDashboard {
  totalMetrics: Int!
  metricsByType: [MetricTypeCount!]!
  reportsByStatus: [StatusCount!]!
  recentReports: [WeeklyReport!]!
  weeklyTrends: [WeeklyTrend!]!
  quarterSummary: [QuarterSummary!]!
}

type MetricTypeCount {
  type: String!
  count: Int!
}

type StatusCount {
  status: String!
  count: Int!
}

type WeeklyTrend {
  weekNumber: Int!
  weekDate: Date!
  greenCount: Int!
  amberCount: Int!
  redCount: Int!
}

type QuarterSummary {
  fiscalYear: String!
  quarter: Int!
  totalReports: Int!
  greenCount: Int!
  amberCount: Int!
  redCount: Int!
}

# Report drafts
type ReportDraft {
  id: ID!
  userId: ID!
  type: String!
  reference: String
  content: String!
  createdAt: Date!
  updatedAt: Date!
}

input SaveDraftInput {
  type: String!
  reference: String
  content: String!
}

# IndusIT automation types
type Automation {
  id: ID!
  apaid: String!
  rpaName: String!
  description: String
  category: String!
  lifecycleStatus: String!
  priority: String!
  businessUnit: String!
  department: String!
  processOwner: String!
  technicalOwner: String!
  createdAt: Date!
  updatedAt: Date
}

input AutomationInput {
  apaid: String!
  rpaName: String!
  description: String
  category: String!
  lifecycleStatus: String!
  priority: String!
  businessUnit: String!
  department: String!
  processOwner: String!
  technicalOwner: String!
}

input AutomationFilterInput {
  category: String
  lifecycleStatus: String
  priority: String
  businessUnit: String
  department: String
  search: String
}

# Execution data types
type ExecutionData {
  id: ID!
  automationId: String!
  currentStatus: String!
  lastSuccessfulExecution: Date
  dailyVolumesProcessed: Int!
  monthlyVolumesProcessed: Int!
  averageExecutionTime: Float
  successRate: Float
  comments: String
  createdAt: Date!
  updatedAt: Date
}

input ExecutionDataInput {
  automationId: String!
  currentStatus: String!
  lastSuccessfulExecution: Date
  dailyVolumesProcessed: Int!
  monthlyVolumesProcessed: Int!
  averageExecutionTime: Float
  successRate: Float
  comments: String
}

input ExecutionDataFilterInput {
  automationId: String
  currentStatus: String
  search: String
}

# Infrastructure server types
type InfraServer {
  id: ID!
  serverName: String!
  ipAddress: String!
  serverType: String!
  environment: String!
  operatingSystem: String!
  location: String!
  status: String!
  comments: String
  createdAt: Date!
  updatedAt: Date
}

input InfraServerInput {
  serverName: String!
  ipAddress: String!
  serverType: String!
  environment: String!
  operatingSystem: String!
  location: String!
  status: String!
  comments: String
}

input InfraServerFilterInput {
  serverType: String
  environment: String
  operatingSystem: String
  location: String
  status: String
  search: String
}

# Interface types
type Interface {
  id: ID!
  interfaceName: String!
  sourceSystem: String!
  targetSystem: String!
  interfaceType: String!
  authenticationType: String!
  credentialLocation: String
  accountName: String
  latestPasswordChangeDate: Date
  nextPasswordUpdateDate: Date
  status: String!
  comments: String
  createdAt: Date!
  updatedAt: Date
}

input InterfaceInput {
  interfaceName: String!
  sourceSystem: String!
  targetSystem: String!
  interfaceType: String!
  authenticationType: String!
  credentialLocation: String
  accountName: String
  latestPasswordChangeDate: Date
  nextPasswordUpdateDate: Date
  status: String!
  comments: String
}

input InterfaceFilterInput {
  sourceSystem: String
  targetSystem: String
  interfaceType: String
  authenticationType: String
  status: String
  search: String
}

# Microbot types
type Microbot {
  id: ID!
  botName: String!
  botType: String!
  location: String!
  status: String!
  assignedAutomations: Int!
  lastDrDate: Date
  comments: String
  createdAt: Date!
  updatedAt: Date
}

input MicrobotInput {
  botName: String!
  botType: String!
  location: String!
  status: String!
  assignedAutomations: Int!
  lastDrDate: Date
  comments: String
}

input MicrobotFilterInput {
  botType: String
  location: String
  status: String
  search: String
}

# IndusIT dashboard summary
type IndusITDashboardSummary {
  totalAutomations: Int!
  automationsByCategory: [CategoryCount!]!
  automationsByStatus: [StatusCount!]!
  volumesProcessedToday: Int!
  priorityP1BotsStatus: [BotStatus!]!
  totalServers: Int!
  totalInterfaces: Int!
  totalMicrobots: Int!
}

type CategoryCount {
  category: String!
  count: Int!
}

type BotStatus {
  apaid: String!
  rpaName: String!
  currentStatus: String!
}

type AdminDashboardSummary {
  lastDrDate: Date
  currentVulnerabilities: Int!
  criticalVulnerabilities: Int!
  highVulnerabilities: Int!
  mediumVulnerabilities: Int!
  lowVulnerabilities: Int!
}
